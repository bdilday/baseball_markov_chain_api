
the probabilities are set with 
-p0 [probability for out]
-p1 [prob for a 1-base hit]
-p2 [prob for a 2-base hit]
etc...

if the inputs dont add up to 1, they get rescaled so that they do...

3 bases, 3 outs, default hit probabilities
> python mlbMarkov_nm.py -nbases 3 -nouts 3 
idx state expectRunsPerInn
  0 000_00 0.369
  1 000_01 0.199
  etc...

3 bases, 4 outs, default hit probabilities
> python mlbMarkov_nm.py -nbases 3 -nouts 4
idx state expectRunsPerInn
  0 000_00 0.585
  1 000_01 0.369
  etc...

3 bases, 3 outs, 50% out and 50% single (or BB) 
>  python mlbMarkov_nm.py -nbases 3 -nouts 3 -p0 0.5 -p1 0.5 -p2 0.0 -p3 0.0 -p4 0.0
  python idx state expectRunsPerInn
  0 000_00 0.938
  1 000_01 0.438 
  etc...

3 bases, 3 outs, 50% out and 25% single, 25% HR (or BB) 
> python mlbMarkov_nm.py -nbases 3 -nouts 3 -p0 0.5 -p1 0.25 -p2 0.0 -p3 0.0 -p4 0.25
  idx state expectRunsPerInn
  0 000_00 2.328
  1 000_01 1.461

make plots (one for each number-of-bases) of mean runs per inning in the bases-empty, no-out state, as a function of outs 
> python
>> import mlbMarkov_nm
>> probs = {0: 0.69, 1: 0.23, 2: 0.05, 3: 0.005, 4: 0.025}
>> nbasemin = 3
>> nbasemax = 4
>> noutmin = 1
>> noutmax = 15
>> mlbMarkov.loopAndPlot(probs=probs, nbasemin=nbasemax, nbasemax=nbasemin, noutmin=noutmin, noutmax=noutmax)

same, but scale it to runs-with-3-outs (using normIndex)
make plots (one for each number-of-bases) of mean runs per inning in the bases-empty, no-out state, as a function of outs 
> python
>> import mlbMarkov_nm
>> probs = {0: 0.69, 1: 0.23, 2: 0.05, 3: 0.005, 4: 0.025}
>> nbasemin = 3
>> nbasemax = 4
>> noutmin = 1
>> noutmax = 15
>> mlbMarkov.loopAndPlot(probs=probs, nbasemin=nbasemax, nbasemax=nbasemin, noutmin=noutmin, noutmax=noutmax, normIndex=2)

